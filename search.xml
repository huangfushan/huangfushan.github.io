<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建个人博客 Hexo + Github Page / FC /（CDN + OSS）</title>
      <link href="2021/04/26/blog/"/>
      <url>2021/04/26/blog/</url>
      
        <content type="html"><![CDATA[<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><blockquote><p>在传统认知里，搭建个人静态网站我们需要：</p></blockquote><ul><li>注册域名</li><li>购买云服务器</li><li>域名备案</li><li>构建静态网页</li><li>部署前端静态资源</li><li>DNS 解析</li></ul><blockquote><p>上诉方案作为技术小白或者初学者来说，上手较难，时间、金钱成本花费较大，不推荐。<br>我们探讨的是如何在低成本的基础上，利用市面上现有的成熟的博客框架，搭建属于我们自己的个人博客。</p></blockquote><h1 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h1><blockquote><p>当然部署方案有很多，在服务器不用自己搭建的的基础上，无非就是找到可以实现免费托管的云厂商进行托管前端静态资源，生成可供访问的域名。</p></blockquote><p>这里仅列出三种方案，供参考。</p><ul><li><a href="https://pages.github.com/">Github Pages</a></li><li><a href="https://www.aliyun.com/product/cdn">内容分发网络CDN</a> + <a href="https://www.aliyun.com/product/oss">对象存储OSS</a></li><li><a href="https://www.aliyun.com/product/fc">阿里云函数计算FC</a></li></ul><h1 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h1><blockquote><p>为了帮助开发者快速搭建所需的网站，这里提供的几种目前市面上比较火的博客框架，可以快速的帮助我们生成所需的静态网页。只需通过上诉任一方案部署，即可访问，方便快捷。</p></blockquote><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo的主题样式也有很多好看的，而且github都有star上万的。</li><li><a href="https://wordpress.org/">Wordpress</a> 是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。有着许多第三方开发的免费模板，安装方式简单易用。</li><li><a href="https://vuepress.vuejs.org/">Vuepress</a> 由两部分组成：一个以 Vue 驱动的主题系统的简约静态网站生成工具，和一个为编写技术文档而优化的默认主题。它是为了支持 Vue 子项目的文档需求而创建的。</li><li><a href="https://www.docusaurus.cn/">Docusaurus</a> 是一个静态网站生成器，基于 React 技术构建，编译成的是静态的 HTML css，支持 Markdown 语法。</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><blockquote><p>上诉博客框架任选其一，下面仅以 <code>Hexo </code> 为例，做各种部署方案的介绍，感兴趣可以自行了解其他框架的使用。</p></blockquote><h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="https://nodejs.org/en/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p><img src="https://o-img.oss-cn-hangzhou.aliyuncs.com/blog/node-git-version.jpg" alt="iamge"></p><p>如图，如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往安装 <a href="#%E5%AE%89%E8%A3%85-Hexo">安装 Hexo</a>。</p><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="- 安装 Git"></a>- 安装 Git</h4><p>Windows：下载并安装<a href="https://git-scm.com/download/win">Git</a><br>Mac：使用 <a href="https://brew.sh/">Homebrew</a>, <a href="https://www.macports.org/">MacPorts</a> 或者下载<a href="https://sourceforge.net/projects/git-osx-installer/">安装程序</a>。<br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="- 安装 Node.js"></a>- 安装 Node.js</h4><p>Node.js 为大多数平台提供了官方的<a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往<a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a>下载。</p><p>其它的安装方法：</p><p>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。<br>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="https://www.macports.org/">MacPorts</a> 安装。<br>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。<br>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a>。</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="- 安装 Hexo"></a>- 安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 <code>npm</code> 安装 <code>Hexo</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="- 初始化"></a>- 初始化</h4><p>安装 <code>Hexo</code> 完成后，请执行下列命令，<code>Hexo</code> 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt; &#x2F;&#x2F; 初始化，如 hexo init blog</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install &#x2F;&#x2F; 可选，hexo 初始化默认会自动安装相关依赖</span><br><span class="line">hexo server &#x2F;&#x2F; 本地启动</span><br></pre></td></tr></table></figure><p><img src="https://o-img.oss-cn-hangzhou.aliyuncs.com/blog/hexo-server.jpg" alt="hexo"><br>本地启动后，出现上即启动成功，浏览器登录图示 <code>http://localhost:4000</code> 地址即可本地访问。</p><p>更多配置信息见 <a href="https://hexo.io/zh-cn/docs/">Hexo 配置</a></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><blockquote><p>上面已经把静态页面搭建完毕，接下来只需把代码部署到指定云厂商托管即可，以下提供三种部署方案，仅供参考。</p></blockquote><h2 id="方案一（Github-Page）"><a href="#方案一（Github-Page）" class="headerlink" title="方案一（Github Page）"></a>方案一（Github Page）</h2><h3 id="Github-创建-repository"><a href="#Github-创建-repository" class="headerlink" title="- Github 创建 repository"></a>- Github 创建 repository</h3><p>在本教程中，我们 将 <code>Hexo</code> 博客部署到 <code>GitHub Pages</code> 上。</p><ul><li><a href="https://github.com/new">新建</a>一个 repository。如果你希望你的站点能通过 &lt;你的 GitHub 用户名&gt;.github.io 域名访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io，如我的 Github 用户名为<code>huangfushan</code>, repository 即 <code>huangfushan.github.io</code>。</li><li>默认情况下不应该 public 目录将不会被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。</li><li>首次使用 <code>Github</code> 可能需要<a href="https://github.com/settings/ssh/new">绑定 SSH Key 密匙</a>，若无密匙见 <a href="/2021/04/25/git/">生成 SSH Key 密匙</a></li></ul><h3 id="Hexo-部署到-Github-Page"><a href="#Hexo-部署到-Github-Page" class="headerlink" title="- Hexo 部署到 Github Page"></a>- Hexo 部署到 Github Page</h3><ul><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure></li><li>修改配置 _config.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;github.com&#x2F;你的 GitHub 用户名&#x2F;你的 GitHub 用户名.github.io.git</span><br></pre></td></tr></table></figure></li><li>部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate &#x2F;&#x2F; 编译</span><br><span class="line">hexo deploy &#x2F;&#x2F; 部署</span><br></pre></td></tr></table></figure></li><li>访问 https://你的 GitHub 用户名.github.io，如 <a href="https://huangfushan.github.io/">https://huangfushan.github.io</a></li></ul><h2 id="部署方案二（阿里云函数计算FC）"><a href="#部署方案二（阿里云函数计算FC）" class="headerlink" title="部署方案二（阿里云函数计算FC）"></a>部署方案二（阿里云函数计算FC）</h2><p>未完待续…</p><h2 id="部署方案三（CDN-OSS）"><a href="#部署方案三（CDN-OSS）" class="headerlink" title="部署方案三（CDN + OSS）"></a>部署方案三（CDN + OSS）</h2><p>未完待续…</p><h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 指令</title>
      <link href="2021/04/25/git/"/>
      <url>2021/04/25/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h1><h2 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;name&lt;自己的用户名&gt;&quot;</span><br><span class="line">git config --global user.email &quot;email&lt;自己的邮箱&gt;&quot;</span><br></pre></td></tr></table></figure><h2 id="生成-SSH-Key-密匙"><a href="#生成-SSH-Key-密匙" class="headerlink" title="生成 SSH Key 密匙"></a>生成 SSH Key 密匙</h2><blockquote><p>cd 到 ~/.ssh 目录下查看是否存在 id_rsa.pub 文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">$ ls</span><br><span class="line">  id_rsa id_rsa.pub</span><br></pre></td></tr></table></figure><blockquote><p>若不存在，执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;emai&lt;自己的邮箱&gt;&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 若涉及权限</span><br><span class="line">sudo ssh-keygen -t rsa -C &quot;emai&lt;自己的邮箱&gt;&quot; </span><br></pre></td></tr></table></figure><p>执行成功后执行 <code>cat ~/.ssh/id_rsa.pub</code>查看密匙，如下图。<br><img src="https://o-img.oss-cn-hangzhou.aliyuncs.com/blog/ssh-key.jpg" alt="SSH KEY"></p><h2 id="绑定远程仓库"><a href="#绑定远程仓库" class="headerlink" title="绑定远程仓库"></a>绑定远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &quot;https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.git&quot; &#x2F;&#x2F; 初次绑定</span><br><span class="line">git remote set-url origin &quot;new repository&quot; &#x2F;&#x2F; 修改远程仓库</span><br></pre></td></tr></table></figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="- 创建分支"></a>- 创建分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="- 切换分支"></a>- 切换分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="拉取合并"><a href="#拉取合并" class="headerlink" title="- 拉取合并"></a>- 拉取合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin&#x2F;&lt;分支名&gt;</span><br><span class="line">或</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="- 添加暂存区"></a>- 添加暂存区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add . &#x2F;&#x2F; 添加所有到暂存区</span><br><span class="line">git add &lt;分支名&gt; &#x2F;&#x2F; 添加指定分支到暂存取</span><br></pre></td></tr></table></figure><h4 id="commit"><a href="#commit" class="headerlink" title="- commit"></a>- commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交日志&quot; &#x2F;&#x2F; 仅暂存区代码 commit</span><br><span class="line">git commit -am &quot;&quot; &#x2F;&#x2F; 添加所有文件到暂存区，并 commit </span><br></pre></td></tr></table></figure><h4 id="提交远程"><a href="#提交远程" class="headerlink" title="- 提交远程"></a>- 提交远程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">&#x2F;&#x2F; 强制提交</span><br><span class="line">git push -f </span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="- 查看分支"></a>- 查看分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch  &#x2F;&#x2F; 查看本地</span><br><span class="line">git branch -a  &#x2F;&#x2F; 查看远程</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="- 删除分支"></a>- 删除分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt; &#x2F;&#x2F; 删除本地分支</span><br><span class="line">git branch -D &lt;分支名&gt; &#x2F;&#x2F; 强制删除本地分支</span><br><span class="line">git push origin -d &lt;分支名&gt; &#x2F;&#x2F; 删除远程</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;文件名&gt; &#x2F;&#x2F; 文件取消暂存区</span><br><span class="line">git reset HEAD &#x2F;&#x2F; 取消所有暂存取</span><br><span class="line">git reset --soft HEAD^ &#x2F;&#x2F; 撤销上一次 commit，并且可以重新 commit</span><br></pre></td></tr></table></figure><h3 id="本地暂存"><a href="#本地暂存" class="headerlink" title="本地暂存"></a>本地暂存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;需要暂存的文件&gt; &#x2F;&#x2F; 添加需要暂存的文件</span><br><span class="line">git stash commit &quot;暂存日志&quot; &#x2F;&#x2F; commit </span><br><span class="line">git stash list &#x2F;&#x2F; 查看所有暂存的 commit 记录</span><br><span class="line">git stash pop &#x2F;&#x2F; 提取最新一条暂存记录，提取指定某条有点问题，暂时不知道怎么提取</span><br></pre></td></tr></table></figure><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1、会删除代码，commit 记录不保留</span><br><span class="line">git reset —-hard &lt;commit id&gt; &#x2F;&#x2F; 回滚到指定 commit</span><br><span class="line">git push -f &#x2F;&#x2F; 强制提交，远程仓库将回滚</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2、会覆盖代码，commit 记录保留</span><br><span class="line">git revert &lt;commit id&gt; &#x2F;&#x2F; 用新的 commit 来回滚之前的 commit</span><br></pre></td></tr></table></figure><h1 id="使用-gitignore-无效的解决方法【已托管在git上的文件，需要保持到本地仓库】"><a href="#使用-gitignore-无效的解决方法【已托管在git上的文件，需要保持到本地仓库】" class="headerlink" title="使用.gitignore 无效的解决方法【已托管在git上的文件，需要保持到本地仓库】"></a>使用.gitignore 无效的解决方法【已托管在git上的文件，需要保持到本地仓库】</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . &#x2F;&#x2F; 所有文件</span><br><span class="line">git rm -r --cached &lt;文件名&gt; &#x2F;&#x2F; 指定文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
